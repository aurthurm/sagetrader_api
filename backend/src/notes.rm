from uuid import uuid4
import shortuuid
from sqlalchemy_utils.types.uuid import UUIDType

uuid = Column(UUIDType(), nullable=False, default=uuid4
@hybrid_property
    def id(self):
        try:
            return shortuuid.encode(self.uuid)
        except AttributeError:
            return

@id.setter
    def id(self, set_id):
        if set_id is str:
            uuid = shortuuid.decode(set_id)
            if uuid is UUID4:
                self.uuid = shortuuid.decode(set_id)


created = Column(DateTime(), default=datetime.utcnow)
changed = Column(DateTime())







from slugify import slugify
class TextIdentified:
    _id = Column(String(255), nullable=False, index=True, unique=True)

    @hybrid_property
    def id(self):
        if self._id is None:
            self._id = slugify(self.name)
        return self._id

    @id.setter
    def id(self, set_id):
        if set_id is not None:
            self._id = slugify(set_id)
        elif self.name is not None:
            self._id = slugify(self.name)